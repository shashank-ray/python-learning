# -*- coding: utf-8 -*-
"""matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UkxFIVHUQn9uMQi3dl7raX3OFxlpYUgc
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

x = [1,2,3,4,5,6,7]
y = [50,51,48,49,52,47,53]

plt.xlabel('Day')
plt.ylabel('Temp in C')
plt.title('Weather')
plt.plot(x,y,color='red',linewidth=3)

x = ["s", "t", "u", "v"]
y = [10,20,30,40]
plt.bar(x,y)
plt.show()

x = ["s", "t", "u", "v"]
y = [10,20,30,40]
plt.bar(x,y)
plt.xlabel("alphabet",fontsize=15)
plt.ylabel("number",fontsize=15)
plt.title("Shashank",fontsize=15)
plt.show()

x = ["s", "t", "u", "v"]
y = [10,20,30,40]
plt.xlabel("alphabet",fontsize=15)
plt.ylabel("number",fontsize=15)
plt.title("Shashank",fontsize=15)
plt.bar(x,y,width=0.4,align="edge")
plt.show()

#doubt
x = ["s", "t", "u", "v"]
y = [10,20,30,40]
plt.xlabel("alphabet",fontsize=15)
plt.ylabel("number",fontsize=15)
plt.title("Shashank",fontsize=15)
c=["y", "g", "b", "r"]
plt.bar(x,y,width=0.4,color=c,align="edge")
plt.show()

#  bar plot
x_values = ['X1', 'X2', 'X3', 'X4']
y1_values = [10, 25, 15, 30]
y2_values = [15, 30, 10, 20]


width = 0.35
ind = np.arange(len(x_values))
plt.bar(ind, y1_values, width, label='Y1', color='blue')
plt.bar(ind + width, y2_values, width, label='Y2', color='orange')

plt.xlabel('X Values')
plt.ylabel('Y Values')
plt.title('Bar Plot Example')
plt.xticks(ind + width / 2, x_values)
plt.legend()
plt.show()

#pie chart
labels = ['Label A', 'Label B', 'Label C']
sizes = [25, 40, 35]

plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90, colors=['gold', 'lightcoral', 'lightskyblue'])
plt.title('Pie Chart Example')
plt.show()

histogram
data = np.random.randn(1000)


plt.hist(data, bins=30, color='skyblue', edgecolor='black')
plt.title('Histogram Example')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.show()

x_data = np.random.rand(50)
y_data = np.random.rand(50)


plt.scatter(x_data, y_data, color='purple', marker='o', label='Random Points')
plt.title('Scatter Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()

x_data = np.linspace(0.1, 2 * np.pi, 20)
y_data = np.sin(x_data)


plt.stem(x_data, y_data, linefmt='b-', markerfmt='bo', basefmt='r-')
plt.title('Stem Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.show()

data = [np.random.normal(0, std, 100) for std in range(1, 4)]


plt.boxplot(data, vert=True, patch_artist=True)
plt.title('Box and Whisker Plot Example')
plt.xlabel('Data Sets')
plt.ylabel('Values')
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Creating an area plot
plt.fill_between(x, y1, y2, color='skyblue', alpha=0.5, label='Area Plot')
plt.title('Area Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Creating a stack plot
plt.stackplot(x, y1, y2, labels=['Component 1', 'Component 2'], colors=['orange', 'green'])
plt.title('Stack Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()

x = np.linspace(0, 10, 11)
y = np.sin(x)

# Creating a step plot
plt.step(x, y, where='mid', color='purple', label='Step Plot')
plt.title('Step Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()
plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Creating a plot with fill_between
plt.plot(x, y1, label='Curve 1')
plt.plot(x, y2, label='Curve 2')
plt.fill_between(x, y1, y2, color='skyblue', alpha=0.3, label='Fill Between')


plt.title('fill_between Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')
plt.legend()

plt.show()

x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Creating subplots
plt.figure(figsize=(10, 4))

# Subplot 1
plt.subplot(1, 2, 1)
plt.plot(x, y1, color='blue')
plt.title('Subplot 1: Sin Curve')

# Subplot 2
plt.subplot(1, 2, 2)
plt.plot(x, y2, color='green')
plt.title('Subplot 2: Cos Curve')

# Adjusting layout
plt.tight_layout()


plt.show()

import seaborn as sns


x = np.linspace(0, 10, 100)
y = np.sin(x)

# Creating a line plot with Seaborn
sns.lineplot(x=x, y=y)

plt.title('Seaborn Line Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')


plt.show()

data = np.random.randn(1000)

# Creating a histogram with Seaborn
sns.histplot(data, bins=30, kde=False, color='skyblue')


plt.title('Seaborn Histogram Example')
plt.xlabel('Value')
plt.ylabel('Frequency')


plt.show()

categories = ['Category A', 'Category B', 'Category C']
values = [30, 50, 20]

# Creating a bar plot with Seaborn
sns.barplot(x=categories, y=values, palette='pastel')


plt.title('Seaborn Bar Plot Example')
plt.xlabel('Categories')
plt.ylabel('Values')

plt.show()

np.random.seed(42)
x = np.random.randn(100)
y = 2 * x + np.random.randn(100)

# Creating a scatter plot with Seaborn
sns.scatterplot(x=x, y=y, color='blue')

# Adding labels and title
plt.title('Seaborn Scatter Plot Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Display the plot
plt.show()

data = np.random.random((5, 5))

# Creating a heatmap with Seaborn
sns.heatmap(data, cmap='viridis', annot=True)

# Adding labels and title
plt.title('Seaborn Heatmap Example')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Display the plot
plt.show()

data = np.random.choice(['A', 'B', 'C'], size=100)

# Creating a count plot with Seaborn
sns.countplot(x=data, palette='pastel')

# Adding labels and title
plt.title('Seaborn Count Plot Example')
plt.xlabel('Categories')
plt.ylabel('Count')

# Display the plot
plt.show()

np.random.seed(42)
category = np.random.choice(['A', 'B', 'C'], size=100)
value = np.random.randn(100)

# Creating a violin plot with Seaborn
sns.violinplot(x=category, y=value, palette='muted')

# Adding labels and title
plt.title('Seaborn Violin Plot Example')
plt.xlabel('Category')
plt.ylabel('Value')

# Display the plot
plt.show()

