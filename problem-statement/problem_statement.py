# -*- coding: utf-8 -*-
"""problem_statement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ICbW0GKxwxwqQZmzMIwm8fb7wMJt02ee
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder

df = pd.read_csv('online_shoppers_intention.csv')

df.head()

df.dropna(inplace=True)

df

df.shape

df_copy = df.copy()

df_copy

df_copy.rename(columns={'Revenue': 'Purchased'}, inplace=True)

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(8, 6))
sns.countplot(x='Purchased', data=df_copy)
plt.title('Distribution of Purchased')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='Month', hue='Purchased', data=df_copy)
plt.title('Distribution of Month by Purchased')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='OperatingSystems', hue='Purchased', data=df_copy)
plt.title('Distribution of OperatingSystems by Purchased')
plt.show()

plt.figure(figsize=(10, 4))
sns.countplot(x='Weekend', hue='Purchased', data=df_copy)
plt.title('Distribution of Weekend by Purchased')
plt.show()

plt.figure(figsize=(10, 6))
sns.countplot(x='VisitorType', hue='Purchased', data=df_copy)
plt.title('Distribution of VisitorType by Purchased')
plt.show()

label_encoder = LabelEncoder()
df_copy['Weekend'] = df_copy['Weekend'].astype(int)
df_copy['Purchased'] = df_copy['Purchased'].astype(int)

df_copy = pd.get_dummies(df_copy, columns=['OperatingSystems', 'Browser', 'Region', 'TrafficType', 'VisitorType', 'Month'])

df_copy.columns

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df_copy[['Administrative']] = scaler.fit_transform(df_copy[['Administrative']])
df_copy[['Administrative_Duration']] = scaler.fit_transform(df_copy[['Administrative_Duration']])
df_copy[['Informational_Duration']] = scaler.fit_transform(df_copy[['Informational_Duration']])
df_copy[['Informational']] = scaler.fit_transform(df_copy[['Informational']])
df_copy[['ProductRelated']] = scaler.fit_transform(df_copy[['ProductRelated']])
df_copy[['ProductRelated_Duration']] = scaler.fit_transform(df_copy[['ProductRelated_Duration']])
df_copy.head()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


X = df_copy.drop("Purchased", axis=1)
y = df_copy["Purchased"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print(f"Confusion Matrix:\n{conf_matrix}")
print(f"Classification Report:\n{classification_rep}")

#random forest
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

X = df_copy.drop("Purchased", axis=1)
y = df_copy["Purchased"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

rf_model = RandomForestClassifier(random_state=42)

rf_model.fit(X_train, y_train)

y_pred_rf = rf_model.predict(X_test)

accuracy_rf = accuracy_score(y_test, y_pred_rf)
conf_matrix_rf = confusion_matrix(y_test, y_pred_rf)
classification_rep_rf = classification_report(y_test, y_pred_rf)

print(f"Random Forest Accuracy: {accuracy_rf}")
print(f"Confusion Matrix:\n{conf_matrix_rf}")
print(f"Classification Report:\n{classification_rep_rf}")

#svm
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

X = df_copy.drop("Purchased", axis=1)
y = df_copy["Purchased"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

svm_model = SVC(random_state=42)

svm_model.fit(X_train, y_train)

y_pred_svm = svm_model.predict(X_test)

accuracy_svm = accuracy_score(y_test, y_pred_svm)
conf_matrix_svm = confusion_matrix(y_test, y_pred_svm)
classification_rep_svm = classification_report(y_test, y_pred_svm)

print(f"SVM Accuracy: {accuracy_svm}")
print(f"Confusion Matrix:\n{conf_matrix_svm}")
print(f"Classification Report:\n{classification_rep_svm}")

#knn
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

X = df_copy.drop("Purchased", axis=1)
y = df_copy["Purchased"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

knn_model = KNeighborsClassifier()

knn_model.fit(X_train, y_train)

y_pred_knn = knn_model.predict(X_test)

accuracy_knn = accuracy_score(y_test, y_pred_knn)
conf_matrix_knn = confusion_matrix(y_test, y_pred_knn)
classification_rep_knn = classification_report(y_test, y_pred_knn)

print(f"KNN Accuracy: {accuracy_knn}")
print(f"Confusion Matrix:\n{conf_matrix_knn}")
print(f"Classification Report:\n{classification_rep_knn}")

